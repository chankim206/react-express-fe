{"version":3,"sources":["components/todo/todo.js","components/todoForm/todoForm.js","components/pagination/pagination.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","deleteTodo","className","style","textDecoration","isCompleted","title","onClick","_id","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","name","placeholder","onChange","target","Pagination","currentPage","todosPerPage","totalTodos","changePage","pageNumbers","i","Math","ceil","push","map","number","key","href","Header","page","App","todos","setTodos","loading","setLoading","setCurrentPage","httpData","a","url","data","method","fetch","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","response","json","useEffect","fetchPosts","newTodos","console","log","filter","indexOfLastTodo","indexOfFirstTodo","items","slice","keys","item","from","opacity","transform","enter","leave","display","update","trail","props","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c11eb4de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./todo.css\";\r\n\r\nfunction Todo({ todo, index, completeTodo, deleteTodo }) {\r\n  return (\r\n    <div\r\n      className=\"todo\"\r\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n    >\r\n      {todo.title}\r\n      <div>\r\n        <button className=\"btn\" onClick={() => completeTodo(todo._id, index)}>\r\n          {\" \"}\r\n          Done{\" \"}\r\n        </button>\r\n        <button className=\"btn\" onClick={() => deleteTodo(todo._id)}>\r\n          {\" \"}\r\n          X{\" \"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport \"./todoForm.css\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!value) {\r\n      return;\r\n    }\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        name=\"title\"\r\n        value={value}\r\n        placeholder=\"Add What To Do\"\r\n        onChange={e => setValue(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport \"./pagination.css\";\r\n\r\nfunction Pagination({ currentPage, todosPerPage, totalTodos, changePage }) {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(totalTodos / todosPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumbers.map(number => (\r\n          <li\r\n            onClick={() => changePage(number)}\r\n            key={number}\r\n            className={\r\n              number === currentPage ? \"page-item current\" : \"page-item\"\r\n            }\r\n          >\r\n            <a\r\n              onClick={() => changePage(number)}\r\n              href=\"#!\"\r\n              className=\"page-link\"\r\n            >\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Transition } from \"react-spring/renderprops\";\nimport Todo from \"./components/todo/todo\";\nimport TodoForm from \"./components/todoForm/todoForm\";\nimport Pagination from \"./components/pagination/pagination\";\nimport \"./App.css\";\n\nfunction Header({ page }) {\n  return (\n    <header>\n      <h1> To Do List with React Hooks </h1>\n      <h2> Current page: {page} </h2>\n    </header>\n  );\n}\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [todosPerPage] = useState(5);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const response = await httpData(\"/todos\", null, \"GET\");\n      setTodos(response);\n      setLoading(false);\n    };\n\n    fetchPosts();\n  }, []);\n\n  async function httpData(url = \"\", data = {}, method) {\n    // Default options are marked with *\n    let response;\n    if (data) {\n      response = await fetch(url, {\n        method, // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, *cors, same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n          \"Content-Type\": \"application/json\"\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n      });\n    } else {\n      response = await fetch(url, {\n        method,\n        mode: \"cors\",\n        cache: \"no-cache\",\n        credentials: \"same-origin\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        redirect: \"follow\",\n        referrer: \"no-referrer\"\n      });\n    }\n\n    return await response.json();\n  }\n\n  const addTodo = async title => {\n    const response = await httpData(\n      \"/todos\",\n      { title, isCompleted: false },\n      \"POST\"\n    );\n    const newTodos = [...todos, response];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = async (key, index) => {\n    await httpData(\n      `/todos/${key}`,\n      { isCompleted: !todos[index].isCompleted },\n      \"PATCH\"\n    );\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const deleteTodo = async key => {\n    const response = await httpData(`/todos/${key}`, null, \"DELETE\");\n    console.log(response);\n    const newTodos = [...todos.filter(todo => key !== todo._id)];\n    setTodos(newTodos);\n  };\n\n  if (loading) {\n    return <h2>Loading</h2>;\n  }\n\n  const indexOfLastTodo = currentPage * todosPerPage;\n  const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n\n  const currentTodos = todos.slice(indexOfFirstTodo, indexOfLastTodo);\n\n  const items = currentTodos.map((todo, index) => (\n    <Todo\n      key={todo._id}\n      index={index + indexOfFirstTodo}\n      todo={todo}\n      completeTodo={completeTodo}\n      deleteTodo={deleteTodo}\n    />\n  ));\n\n  return (\n    <div className=\"app\">\n      <Header page={currentPage} />\n      <div className=\"todo-list\">\n        <Transition\n          items={items}\n          keys={item => item.key}\n          from={{ opacity: 0, transform: \"translate3d(100%,0,0)\" }}\n          enter={{ opacity: 1, transform: \"translate3d(0%,0,0)\" }}\n          leave={{ display: \"none\" }}\n          update={{ transform: \"translate3d(0,0px,0)\" }}\n          trail={100}\n        >\n          {item => props => <div style={props}>{item}</div>}\n        </Transition>\n        <TodoForm addTodo={addTodo} />\n      </div>\n      <Pagination\n        currentPage={currentPage}\n        todosPerPage={todosPerPage}\n        totalTodos={todos.length}\n        changePage={setCurrentPage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}